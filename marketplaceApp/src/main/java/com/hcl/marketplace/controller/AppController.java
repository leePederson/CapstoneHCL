package com.hcl.marketplace.controller;

import java.util.List;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hcl.marketplace.entity.User;
import com.hcl.marketplace.repository.UserRepository;
import com.hcl.marketplace.service.impl.UserServiceImpl;




@Controller
public class AppController {
	
	private UserServiceImpl userService;
	
	@Autowired
	private UserRepository userRepo;
	@RequestMapping(value = "/index")
	public String index() {
		return "index";
	}
	
	@GetMapping("/register")
	public String showRegistrationForm(Model model) {
		model.addAttribute("user", new User());
		return "signup_form";
	}

	
	@PostMapping("/process_register")
	public String processRegister(User user) {
		userRepo.save(user);
		String userEmail = user.getEmail();
		String from = "from@example.com";
		final String username = "1a2b3c4d5e6f7g";//username generated by Mailtrap
	    final String password = "1a2b3c4d5e6f7g";//password generated by Mailtrap
		String host = "smtp.mailtrap.io";
		
		Properties props = new Properties();
		props.put("mail.smtp.auth",  "true");
		props.put("mail.smtp.starttls.enable", "true");//itâ€™s optional in Mailtrap
	    props.put("mail.smtp.host", host);
	    props.put("mail.smtp.port", "2525");// use one of the options in the SMTP settings tab in your Mailtrap Inbox

	    Session session = Session.getInstance(props, new Authenticator() {
	    	protected PasswordAuthentication getPasswordAuthentication() {
	    		return new PasswordAuthentication(username, password);
	    	}
	    });
	    
	    try {
	        // Create a default MimeMessage object.
	        Message message = new MimeMessage(session);

	        // Set From: header field
	        message.setFrom(new InternetAddress(from));

	        // Set To: header field
	        message.setRecipients(Message.RecipientType.TO,
	                   InternetAddress.parse(userEmail));

	        // Set Subject: header field
	        message.setSubject("Welcome to Lee's Marketplace!");

	        // Put the content of your message
	        message.setText("FIXME add email authentication.");

	        // Send message
	        Transport.send(message);
	        System.out.println("Sent message successfully....");
	    } catch (MessagingException e) {
	    	throw new RuntimeException(e);
	    }
	    
	    return "register_success";
	}
	
	@GetMapping("/users")
	public @ResponseBody Iterable<User> getAllUsers(){
		return userRepo.findAll();
	}
	
}
